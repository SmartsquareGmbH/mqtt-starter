buildscript {
    ext {
        javaVersion = JavaVersion.VERSION_1_8

        junitVersion = "5.7.1"
        kotlinVersion = "1.4.30"
        detektVersion = "1.16.0"
        ktlintVersion = "10.0.0"
        jacksonVersion = "2.12.1"
        springBootVersion = "2.4.2"
        awaitilityVersion = "4.0.3"
        hivemqClientVersion = "1.2.1"
        testcontainersVersion = "1.15.2"
        kluentVersion = "1.65"
        dokkaVersion = "1.4.30"
        dependencyManagementVersion = "1.0.11.RELEASE"
        gradleNexusVersion = "1.0.0"
    }

    repositories {
        gradlePluginPortal()
    }

    configurations.classpath {
        resolutionStrategy.activateDependencyLocking()
    }
}

plugins {
    id 'signing'
    id 'maven-publish'
    id "org.jetbrains.kotlin.jvm" version "$kotlinVersion"
    id "org.jetbrains.kotlin.plugin.spring" version "$kotlinVersion"
    id "org.jetbrains.dokka" version "$dokkaVersion"
    id "io.gitlab.arturbosch.detekt" version "$detektVersion"
    id "org.jlleitschuh.gradle.ktlint" version "$ktlintVersion"
    id 'io.spring.dependency-management' version "$dependencyManagementVersion"
    id "io.github.gradle-nexus.publish-plugin" version "$gradleNexusVersion"
}

repositories {
    mavenCentral()
    jcenter()
}

java {
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion

    withJavadocJar()
    withSourcesJar()
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = javaVersion.toString()
        allWarningsAsErrors = true
    }
}

dependencies {
    implementation "org.springframework.boot:spring-boot:$springBootVersion"
    implementation "org.springframework.boot:spring-boot-autoconfigure:$springBootVersion"
    implementation "org.springframework.boot:spring-boot-configuration-processor:$springBootVersion"
    implementation "org.springframework.boot:spring-boot-starter-validation:$springBootVersion"

    api "com.hivemq:hivemq-mqtt-client:$hivemqClientVersion"

    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:$jacksonVersion"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion"

    testImplementation "org.amshove.kluent:kluent:$kluentVersion"
    testImplementation "org.junit.jupiter:junit-jupiter:$junitVersion"
    testImplementation "org.awaitility:awaitility-kotlin:$awaitilityVersion"
    testImplementation "org.testcontainers:testcontainers:$testcontainersVersion"
    testImplementation "org.testcontainers:junit-jupiter:$testcontainersVersion"
    testImplementation("org.springframework.boot:spring-boot-starter-test:$springBootVersion") {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
}

dokkaHtml {
    outputDirectory.set(javadoc.destinationDir)

    dokkaSourceSets {
        named("main") {
            jdkVersion.set(javaVersion)
            sourceLink {
                localDirectory.set(file("src/main/kotlin"))
                remoteUrl.set(new URL("https://github.com/SmartsquareGmbH/mqtt-starter/blob/master/src/main/kotlin"))
                remoteLineSuffix.set("#L")
            }
        }
    }
}

detekt {
    config = files("${project.rootDir}/detekt.yml")

    buildUponDefaultConfig = true
}

ktlint {
    outputToConsole = true
}

tasks.withType(Javadoc).all {
    it.dependsOn dokkaHtml
}

group = 'de.smartsquare'
version = System.getenv("GITHUB_VERSION") ?: "1.0.0-SNAPSHOT"
description = 'Spring Boot Starter wrapping the hivemq mqtt client.'

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'mqtt-starter'

            from components.java

            pom {
                name = 'Mqtt-Starter'
                description = 'Spring Boot Starter wrapping the hivemq mqtt client.'
                url = 'https://github.com/SmartsquareGmbH/mqtt-starter'

                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }
                developers {
                    developer {
                        id = 'deen13'
                        name = 'Dennis Dierkes'
                        email = 'dierkes@smartsquare.de'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/SmartsquareGmbH/mqtt-starter.git'
                    developerConnection = 'scm:git:ssh://github.com/SmartsquareGmbH/mqtt-starter.git'
                    url = 'https://github.com/SmartsquareGmbH/mqtt-starter'
                }
                organization {
                    name = 'Smartsquare GmbH'
                    url = 'https://github.com/SmartsquareGmbH'
                }
                issueManagement {
                    system = 'GitHub'
                    url = 'https://github.com/SmartsquareGmbH/mqtt-starter/issues'
                }
            }
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
            username = project.findProperty("gpr.ossrhUser") ?: System.getenv("OSSRHUSER")
            password = project.findProperty("gpr.ossrhPassword") ?: System.getenv("OSSRHPASSWORD")
        }
    }
}

signing {
    def signingKey = findProperty("signingKey") ?: System.getenv("GPG_PRIVATE_KEY")
    def signingPassword = findProperty("signingPassword") ?: System.getenv("GPG_PASSPHRASE")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}

test {
    useJUnitPlatform()
}
